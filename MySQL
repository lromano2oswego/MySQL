-----------------------------------------------------------------------------------
DATABASE SCHEMA ===================================================================
-----------------------------------------------------------------------------------
USE familytree;

CREATE TABLE users (
    user_id INT NOT NULL AUTO_INCREMENT,        --  identifier for each user
    username VARCHAR(200),          
    email_address VARCHAR(200),        
    PRIMARY KEY(user_id));
    
INSERT INTO users (username, email_address) 
VALUES ('JohnSmith123', 'johnsmith@gmail.com');
INSERT INTO users (username, email_address) 
VALUES ('xXPDunphyXx', 'phildunphy@yahoo.com');
INSERT INTO users (username, email_address) 
VALUES ('GlorDog888', 'gloriapritchett1@gmail.com');

CREATE TABLE family_trees (
    family_tree_id INT AUTO_INCREMENT,      -- identifier for each family tree
    tree_name VARCHAR(200),          -- Name of family tree
    user_id INT,                         -- user who owns the family tree
    privacy_setting ENUM('Public', 'Private') DEFAULT 'Private',
    PRIMARY KEY (family_tree_id),                    
    FOREIGN KEY (user_id) REFERENCES users(user_id)  -- linking to the users table
    ON DELETE CASCADE);                             -- trees are deleted if the user is deleted

INSERT INTO family_trees (tree_name, user_id, privacy_setting) 
VALUES ('Smith Family Tree', 1, 'Private');
INSERT INTO family_trees (tree_name, user_id, privacy_setting) 
VALUES ('Dunphy Family Tree', 3, 'Private');
INSERT INTO family_trees (tree_name, user_id, privacy_setting) 
VALUES ('Pritchett Family Tree', 2, 'Private');

CREATE TABLE family_members (
    member_id INT AUTO_INCREMENT,       -- identifier for each family member
    user_id INT,                        -- user who owns the family tree
    tree_id INT,                        -- References the family tree
    name VARCHAR(200),
    birthdate DATE,
    deathdate DATE,
    gender ENUM('Male', 'Female', 'Other'),
    added_by INT,                       -- who added the family member
    additional_info VARCHAR(2000) DEFAULT NULL,
    PRIMARY KEY (member_id),            -- identifier for family members
    FOREIGN KEY (tree_id) REFERENCES family_trees(family_tree_id) ON DELETE CASCADE,
    FOREIGN KEY (added_by) REFERENCES users(user_id) ON DELETE SET NULL);

INSERT INTO family_members (user_id, tree_id, name, birthdate, deathdate, gender, added_by, additional_info)
VALUES (1, 1, 'John Smith', '1970-05-15', NULL, 'Male', 1, NULL);
INSERT INTO family_members (user_id, tree_id, name, birthdate, deathdate, gender, added_by, additional_info)
VALUES (2, 1, 'Jane Doe', '1975-08-20', NULL, 'Female', 2, NULL);
INSERT INTO family_members (user_id, tree_id, name, birthdate, deathdate, gender, added_by, additional_info)
VALUES (3, 2, 'Phil Dunphy', '1970-07-02', NULL, 'Male', 3, NULL);
INSERT INTO family_members (user_id, tree_id, name, birthdate, deathdate, gender, added_by, additional_info)
VALUES (3, 2, 'Claire Dunphy', '1972-10-15', NULL, 'Female', 3, NULL);
INSERT INTO family_members (user_id, tree_id, name, birthdate, deathdate, gender, added_by, additional_info)
VALUES (1, 1, 'John Jr. Smith', '2000-01-01', NULL, 'Male', 1, NULL);
INSERT INTO family_members (user_id, tree_id, name, birthdate, deathdate, gender, added_by, additional_info)
VALUES (3, 2, 'Luke Dunphy', '2002-05-12', NULL, 'Male', 3, NULL);

CREATE TABLE suggested_edits (
    suggestion_id INT AUTO_INCREMENT PRIMARY KEY,
    member_id INT, -- references which family member is being edited
    suggested_by INT, -- user id that suggested the edit
    field_name VARCHAR(100), -- name of the field being edited (name, birthdate, etc.)
    old_value VARCHAR(2000), -- value that is being changed
    new_value VARCHAR(2000), -- new value inputed by editor
    suggestion_status ENUM('Pending', 'Accepted', 'Denied') DEFAULT 'Pending',
    FOREIGN KEY (member_id) REFERENCES family_members(member_id) ON DELETE CASCADE,
    FOREIGN KEY (suggested_by) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE relationships (
    relationship_id INT AUTO_INCREMENT,       -- identifier for each relationship
    tree_id INT,           -- Family tree ID this relationship belongs to
    member1_id INT,                                                     
    member2_id INT,                                                     
    relationship ENUM('Parent', 'Spouse', 'Sibling', 'Child', 'Other'), 
    PRIMARY KEY (relationship_id),                                     
    FOREIGN KEY (tree_id) REFERENCES family_trees(family_tree_id) ON DELETE CASCADE,  -- Foreign key to family_trees
    FOREIGN KEY (member1_id) REFERENCES family_members(member_id) ON DELETE CASCADE,  -- Foreign key to family_members
    FOREIGN KEY (member2_id) REFERENCES family_members(member_id) ON DELETE CASCADE);   -- Foreign key to family_members

INSERT INTO relationships (tree_id, member1_id, member2_id, relationship)
VALUES (1, 1, 5, 'Parent'); 
INSERT INTO relationships (tree_id, member1_id, member2_id, relationship)
VALUES (2, 3, 6, 'Parent');  
-- Spouse relationships
INSERT INTO relationships (tree_id, member1_id, member2_id, relationship)
VALUES (1, 1, 2, 'Spouse'); 
INSERT INTO relationships (tree_id, member1_id, member2_id, relationship)
VALUES (2, 3, 4, 'Spouse');  

CREATE TABLE attachments (
    media_id INT AUTO_INCREMENT,      -- identifier for each file
    member_id INT,                      -- family member the file is attached to
    type_of_file VARCHAR(50),         -- Type of file ( image, document)
    file_data MEDIUMBLOB,		-- Holds binary data for image (up to 16 mb)
    uploaded_by INT,                    -- User who uploaded the file
    PRIMARY KEY (media_id),                              
    FOREIGN KEY (member_id) REFERENCES family_members(member_id) ON DELETE CASCADE,  -- If family member is deleted, delete attachments
    FOREIGN KEY (uploaded_by) REFERENCES users(user_id) ON DELETE SET NULL);    -- If the uploader is deleted, set uploaded_by to NULL
    

INSERT INTO attachments (member_id, type_of_file, file_data, uploaded_by) 
VALUES (1, 'image', NULL, 1);
INSERT INTO attachments (member_id, type_of_file, file_data, uploaded_by)  
VALUES (2, 'document', NULL, 2);
INSERT INTO attachments (member_id, type_of_file, file_data, uploaded_by)  
VALUES (3, 'image', NULL, 3);
SELECT * FROM family_trees;

CREATE TABLE collaborations (
    collaboration_id INT AUTO_INCREMENT,      
    tree_id INT,                            -- References the family tree
    user_id INT,                              -- References the user
    role ENUM('Owner', 'Editor', 'Viewer') DEFAULT 'Viewer', 
    status ENUM('Accepted', 'Declined', 'Pending') DEFAULT 'Pending',  -- Status of the collaboration
    PRIMARY KEY (collaboration_id),           -- Primary key
    FOREIGN KEY (tree_id) REFERENCES family_trees(family_tree_id) ON DELETE CASCADE,  -- Link to family_trees
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE);                 -- Link to users

INSERT INTO collaborations (tree_id, user_id, role, status)
VALUES (1, 2, 'Editor', 'Pending');
INSERT INTO collaborations (tree_id, user_id, role, status)
VALUES (2, 2, 'Viewer', 'Accepted');
INSERT INTO collaborations (tree_id, user_id, role, status)
VALUES (1, 3, 'Editor', 'Declined');
INSERT INTO collaborations (tree_id, user_id, role, status)
VALUES (1, 2, 'Owner', 'Accepted');

-----------------------------------------------------------------------------------
END DATABASE SCHEMA ===============================================================
-----------------------------------------------------------------------------------



QUERIES ---------------------------------------------------------------------------

For Login:
Check if user exists -
SELECT user_id, username FROM users WHERE email_address = ?;

If no user exists create a new user -
INSERT INTO users (username, email_address)
VALUES (?, ?); -- Role is default set to 'Guest'

Retrieve data for already registered user (if user exists) -
SELECT user_id, username FROM users WHERE email_address = ?;
--------------------------------------------------------------------

For Create Family Tree:
User inputs family tree information and creates a tree -
INSERT INTO family_trees (tree_name, user_id, privacy_setting)
VALUES (?, ?, ?);

Insert user as an owner of the tree in collaborations table -
INSERT INTO collaborations (tree_id, user_id, role, status)
VALUES (?, ?, 'Owner', 'Accepted');

Optionally inviting a collaborator -
INSERT INTO collaborations (tree_id, user_id, role, status)
VALUES (?, ?, 'Editor', 'Pending');
—----------------------------------------------------------------

For Edit Tree Information:
When user clicks Edit Tree, tree name and privacy settings are retrieved -
SELECT tree_name, privacy_setting FROM family_trees
WHERE family_tree_id = ?;


Update the tree name to the user’s changed tree name -
UPDATE family_trees SET tree_name = ? 
WHERE family_tree_id = ?;

Update family tree privacy settings -
UPDATE family_trees SET privacy_setting = ?
WHERE family_tree_id = ?;
—------------------------------------------------------------------

For Delete Tree:
Retrieve all data to display what is going to be deleted or just for tracking first find individuals in the tree -
SELECT member_id, name FROM family_members
WHERE tree_id = ?;

Find relationships in the tree -
SELECT relationship_id, member1_id, member2_id, relationship FROM relationships 
WHERE tree_id = ?;

Delete relationships -
DELETE FROM relationships WHERE tree_id = ?;

Delete individuals -
DELETE FROM family_members WHERE tree_id = ?;

Remove collaborators as the tree they are associated with will no longer exist -
DELETE FROM collaborations WHERE tree_id = ?;

Delete family tree after previous steps are removed -
DELETE FROM family_trees WHERE family_tree_id = ?;
—--------------------------------------------------------------------

For Create Individual:
Retrieve tree data when add individual is clicked -
SELECT tree_name, privacy_setting FROM family_trees
WHERE family_tree_id = ?;

Insert new individual after details are provided -
INSERT INTO family_members (user_id, tree_id, name, birthdate, gender, added_by, additional_info) VALUES (?, ?, ?, ?, ?, ?, ?);

User specifies relationships with already created individuals -
INSERT INTO relationships (tree_id, member1_id, member2_id, relationship)
VALUES (?, ?, ?, ?);

User sets additional info for an individual -
UPDATE family_members SET deathdate = ?, additional_info = ?
WHERE member_id = ?;

User adds file attachments or images -
INSERT INTO attachments (member_id, type_of_file, file_data, uploaded_by)
VALUES (?, ?, ?, ?);
—-----------------------------------------------------------------------------------

For Delete Individual:
Find individual -
SELECT member_id, name, tree_id FROM family_members
WHERE member_id = ?

Find relationships -
SELECT relationship_id, member1_id, member2_id, relationship FROM relationships
WHERE member1_id = ? OR member2_id = ?;


Delete relationships -
DELETE FROM relationships WHERE member1_id = ? OR member2_id = ?;

Delete Individual - 
DELETE FROM family_members WHERE member_id = ?;

After deleting, the system checks for orphaned relationships that were created as a result of deleting -
SELECT member_id FROM family_members
WHERE member_id NOT IN (SELECT member1_id FROM relationships)
AND member_id NOT IN (SELECT member2_id FROM relationships)
AND tree_id = ?;

Delete orphaned individuals -
DELETE FROM family_members
WHERE member_id = ? AND tree_id = ?;

Update the family tree with new information -
SELECT member_id, name, birthdate, deathdate, gender FROM family_members
WHERE tree_id = ?;
—----------------------------------------------------------------------------------

For Invite Collaborator:
Search for a user by their username -
SELECT user_id, username FROM users WHERE username = ?;

Insert a pending collaboration if username found -
INSERT INTO collaborations (tree_id, user_id, role, status)
VALUES (?, ?, ‘Editor’, ‘Pending’);

Handling a user denying the request -
UPDATE collaborations SET status = ‘Declined’
WHERE tree_id = ? AND user_id = ?;

Handling a user accepting the request -
UPDATE collaborations SET status = ‘Accepted’, role = ‘Editor’
WHERE tree_id = ? AND user_id = ?;
—--------------------------------------------------------------------------------------------

For Suggest Edit:
Store the suggested edit -
INSERT INTO suggested_edits (member_id, suggested_by, field_name, old_value, new_value)
VALUES (?, ?, ?, ?, ?);

Family owner is notified and views the suggested edit(s) -
SELECT suggestion_id, member_id, field_name, old_value, new_value
FROM suggested_edits WHERE suggestion_status = ‘Pending’;

Apply suggested edit(s) if accepted -
UPDATE family_members SET field_name = ?
WHERE member_id = ?;

Update suggested edit as accepted -
UPDATE suggested_edits SET suggestion_status = ‘Accepted’ 
WHERE suggestion_id = ?;

If the request is denied delete the suggested edit -
DELETE FROM suggested_edits WHERE suggestion_id = ?;
—--------------------------------------------------------------------------------------

For Edit Individual:
If user selects to delete an individual, delete relations -
DELETE FROM relationships
WHERE member1_id = ? OR member2_ID = ?;

Delete the individual -
DELETE FROM family_members
WHERE member_id = ?;

Retrieve individual details that is being edited -
SELECT name, birthdate, gender FROM family_members
WHERE member_id = ?;

Update individual details - 
UPDATE family_members SET name = ?, birthdate = ?, gender = ?
WHERE member_id = ?;

Update relationships where applicable -
UPDATE relationships SET relationships = ?
WHERE (member1_id = ? AND member2_id = ?)
        OR (member1_id = ? AND member2_id = ?);
—--------------------------------------------------------------------------

For Merge Trees:
Retrieve family trees for both owners, do the same query for each owner -
SELECT member_id, name, birthdate, gender, additional_info
FROM family_members WHERE tree_id = ?;

If conflict is resolve update existing record -
UPDATE family_members SET name = ?, birthdate = ?, gender = ?, additional_info = ?
WHERE member_id = ?;

If a new individual is created -
INSERT INTO family_members(tree_id, name, birthdate, gender, additional_info, added_by)
VALUES (?, ?, ?, ?, ?, ?);

If a new tree is created as a result -
INSERT INTO family_trees (tree_name, user_id, privacy_setting)
VALUES(?, ?, ?);

Update individual records to show merge  -
UPDATE family_members SET tree_id = ? WHERE member_id = ?;
Follow delete tree steps to remove any trees not needed

Possibly remove collaborations from new merged tree and make owners re invite collaborators -
DELETE FROM collaborations WHERE tree_id = ?;

Update the merged tree to have two owners -
INSERT INTO collaborations (tree_id, user_id, role, status)
VALUES (?, ?, ‘Owner’, ‘Accepted’), (?, ?, ‘Owner’, ‘Accepted’);


